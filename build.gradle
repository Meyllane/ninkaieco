import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id "com.gradleup.shadow" version "8.3.0"
}

group = 'com.github.meyllane'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    compileOnly files("server/plugins/Seisan_Plugin_For_Ninkai-3.0.7.jar")
    compileOnly "dev.jorel:commandapi-bukkit-core:9.7.0"
    compileOnly "dev.jorel:commandapi-annotations:9.7.0"
    compileOnly("de.tr7zw:item-nbt-api-plugin:2.13.1")
    annotationProcessor "dev.jorel:commandapi-annotations:9.7.0"
    implementation "net.kyori:adventure-api:4.19.0"
    implementation "net.kyori:adventure-platform-bukkit:4.3.4"
    implementation "net.kyori:adventure-text-minimessage:4.19.0"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.named("shadowJar", ShadowJar) {
    archiveBaseName = "${project.name}"
    archiveVersion = "${project.version}"
    archiveClassifier = ""
}

tasks.register('moveJarToDebugServer') {
    copy {
        from file("./build/libs/${project.name}-${project.version}.jar")
        into file("${projectDir}/server/plugins")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
